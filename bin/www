#!/usr/bin/env node
/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('api-tree:server');
const http = require('http');
const db = require('../db');
const mqtt = require('mqtt');
const deviceRoot = 'demo/device/';

let collection;
let client;
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);


/**
* Connect to database
*/

db.connect('mongodb://lpat:4heW78svFtR4@ds111622.mlab.com:11622/api-tree', (err) => {
  if (err) {
    console.log('Unable to connect to Mongo.');
  } else {
    console.log('Connected to database');

    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
    app.io = require('socket.io')(server);

    // app.io.attach(server);
  }
});

function insertEvent(topic, payload) {
  console.log(topic);
  console.log(payload);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}
